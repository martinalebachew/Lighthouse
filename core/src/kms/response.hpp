// response.hpp
// (C) Martin Alebachew, 2023

/*
This file defines the KMS Response struct.
This file includes modified code from vlmcsd/kms.h by Wind4.
*/

#pragma once
#pragma pack(push, 1)
#include "crypto.hpp"
#include "hmac.hpp"
#include "request.hpp"
#include "sha256.hpp"
#include "winapi_types.hpp"
#include <cstdint>
#include <vector>

namespace KMS {
struct Response {
  /* NOTE
  Modifying the properties below may break the casting algorithm.
  Adjust it accordingly.
  */

  uint32_t bodyLength1;
  uint32_t _ = 131072; // TODO: Figure out the purpose of this field
  uint32_t bodyLength2;

  // UNENCRYPTED
  VERSION RawVersion; // Minor and major version, unencrypted
  BYTE IV[16];        // Initialization vector generated by the client

  // ENCRYPTED, AES CBC 128-bits key, PKCS7
  VERSION Version;            // Minor and major version
  DWORD PIDSize;              // Size of PIDData in bytes
  WCHAR KmsPID[64];           // [Variable size] ePID (must include terminating zero)
  GUID CMID;                  // Client machine id. Must be the same as in request
  FILETIME ClientTime;        // Current client time. Must be the same as in request
  DWORD Count;                // Current activated machines. KMS server counts up to N_Policy << 1 then stops
  DWORD VLActivationInterval; // Time in minutes when clients should retry activation if it was unsuccessful (default 2 hours)
  DWORD VLRenewalInterval;    // Time in minutes when clients should renew KMS activation (default 7 days)

  BYTE RandomXoredIVs[16]; // Random salt ^ decrypted Request IV
  BYTE Hash[32];           // SHA256 of Random salt used in RandomXoredIVs
  BYTE HwId[8];            // HwId from the KMS server
  BYTE XoredIVs[16];       // Decrypted Request IV
  BYTE HMAC[16];           // V6 Hmac (low 16 bytes only)

  // 16-octet alignment padding might be present here, required for encryption
  // 4 bytes error code should be present here
  // Both are added in the encrypted buffer

  Response(KMS::Request &request);
  std::vector<byte> toEncryptedBuffer();
};
} // namespace KMS

#pragma pack(pop)
